Адаптер применяется, в случае если уже готова структура программы, или уже давно используется,
и добавляется новый функционал, и чтобы вместо того чтобы переписывать куски кода,
создаётся адаптер, который будет взаимодействовать со старым функционалом (с интерфейсом) новыми способами(новым интерфейсом)

Пплюсы: 
- Сохранение работоспособности существующего кода, нет необходимости переписывать уже рабочий функционал
- Меньше багов и ошибок, из-за того что не трогаем уже рабочий код
- Разделение ответственности, адаптер отделяет код преобразования интерфейса от основной бизнес-логики
- Возможность работать со сторонними пакетами, если пакет требует определённый интерфейс, а код не соответсвует ему, то просто пишем адаптер

Минусы:
- Код становится нагромождённым и менее понятным на первый взгляд, легко запутаться
- Дополнительные абстракции, цепочка вызовов становится длиньше, что может доставить проблем в отладке

На мой взгляд, адаптеры применяются в микросервисных архитектурах, 
при добавлении новых сервисов, т.к. старые работают через одни интерфейсы, 
и под них нужно подстроить новый функционал, который использует в своей работе свои интерфейсы.
Например:
захотели добавить сервис, который сохраняет данные у клиента на локальной машине, 
создали этот сервис отдельно, и нужно его присоединить к уже рабочей системе, в этом случае помогут адаптеры